def product(a, b):
    return (a * b)
    
def weekday_name(day_of_week):
    if (day_of_week == 1):
        return "Sunday"
    elif (day_of_week == 2):
        return "Monday"
    elif (day_of_week == 3):
        return "Tuesday"
    elif (day_of_week == 4):
        return "Wednesday"
    elif (day_of_week == 5):
        return "Thursday"
    elif (day_of_week == 6):
        return "Friday"
    elif (day_of_week == 7):
        return "Saturday"
    else: return None
    
def last_element(lst):
    if not lst:
        return None
    else:
        return lst[-1]
        
def number_compare(a, b):
    if (a == b):
        return 'Numbers are equal'
    elif (a < b):
        return 'Second is greater'
    elif (a > b):
        return 'First is greater'
        
def reverse_string(phrase):
    return phrase[::-1]
    
def single_letter_count(word, letter):
    finalWord = word.upper()
    finalLetter = letter.upper()
    return finalWord.count(finalLetter)
    
def multiple_letter_count(phrase):
    counter = {}
    for ltr in phrase:
        counter[ltr] = counter.get(ltr, 0) + 1
    return counter
    
def list_manipulation(lst, command, location, value=None):
    if command == 'remove' and location == 'beginning':
        return lst[0]
    elif command == 'add' and location == 'beginning':
        lst.insert(0, value)
        return lst
    elif command == 'remove' and location == 'end':
        return lst[-1]
    elif command == 'add' and location == 'end':
        lst.append(value)
        return lst
    else:
        return None
        
def is_palindrome(phrase):
    upperP = phrase.upper()
    checkP = upperP.replace(' ', '')
    for i in range(0, int(len(checkP)/2)):
        if checkP[i] != checkP[len(checkP)-i-1]:
            return False
    return True
    
def frequency(lst, search_term):
    return lst.count(search_term)
    
def flip_case(phrase, to_swap):
    to_swap = to_swap.lower()
    out = ""def multiply_even_numbers(nums):
    evens = []
    result = 1
    for num in nums:
        if num % 2 == 0:
            evens.append(num)
    for even in evens:
        result = result * even
    return result
    
def capitalize(phrase):
    return phrase.capitalize()
    
def compact(lst):
    return [val for val in lst if val]
    
def intersection(l1, l2):
    shared = list(set(l1).intersection(l2))
    return shared
    
def partition(lst, fn):
    true_list = []
    false_list = []
    for val in lst:
        if fn(val):
            true_list.append(val)
        else:
            false_list.append(val)

    return [true_list, false_list]
    for ltr in phrase:
        if ltr.lower() == to_swap:
            ltr = ltr.swapcase()
        out += ltr
    return out
    
def multiply_even_numbers(nums):
    evens = []
    result = 1
    for num in nums:
        if num % 2 == 0:
            evens.append(num)
    for even in evens:
        result = result * even
    return result
    
def partition(lst, fn):
    true_list = []
    false_list = []
    for val in lst:
        if fn(val):
            true_list.append(val)
        else:
            false_list.append(val)
    return [true_list, false_list]

def mode(nums):
    counter = 0
    num = nums[0]
    for i in nums:
        common = nums.count(i)
        if(common > counter):
            counter = common
            num = i
    return num
    
def calculate(operation, a, b, make_int=False, message='The result is'):
      if operation == "add":
        result = a + b
    elif operation == "subtract":
        result = a - b
    elif operation == "multiply":
        result = a * b
    elif operation == "divide":
        result = a / b
    else:
        return None
    if make_int:
        result = int(result)
    return f"{message} {result}"
    
def calculate(operation, a, b, make_int=False, message='The result is'):
      if operation == "add":
        result = a + b
    elif operation == "subtract":
        result = a - b
    elif operation == "multiply":
        result = a * b
    elif operation == "divide":
        result = a / b
    else:
        return None
    if make_int:
        result = int(result)
    return f"{message} {result}"
    
def triple_and_filter(nums):
    fours = []
    for num in nums:
        if num % 4 == 0:
            fours.append(num)
    multiList = [num * 3 for num in fours]
    return multiList
    
def extract_full_names(people):
    return [f"{person['first']} {person['last']}" for person in people]
    
def sum_floats(nums):
    return sum([num for num in nums if isinstance(num, float)])
    
def list_check(lst):
    for element in lst:
        if not isinstance(element, list):
            return False
    return True
    
def remove_every_other(lst):
    return lst[0::2]
    
def sum_pairs(nums, goal):
    already_visited = set()
    for i in nums:
        difference = goal - i
        if difference in already_visited:
            return (difference, i)
        already_visited.add(i)
    return ()
    
def vowel_count(phrase):
    vowels = ('a','e','i','o','u')
    finalPhrase = phrase.lower()
    counter = {}
    for letter in finalPhrase:
        if letter in vowels:
            counter[letter] = counter.get(letter, 0) + 1
    return counter
    
def titleize(phrase):
    finalPhrase = phrase.lower()
    for letter in finalPhrase:
        return finalPhrase.title()
        
def find_factors(num):
    factors = []
    for i in range(1,num+1):
       if num % i == 0:
            factors.append(i)
    return factors
    
def includes(collection, sought, start=None):
    if isinstance(collection, dict):
        return sought in collection.values()
    if start is None or isinstance(collection, set):
        return sought in collection
    return sought in collection[start:]
    
def repeat(phrase, num):
    if not isinstance(num, int) or num < 0:
        return None
    return phrase * num
    
def truncate(phrase, n):
       if n < 3:
        return "Truncation must be at least 3 characters."
    if n > len(phrase) + 2:
        return phrase
    return phrase[:n - 3] + "..."
    
def two_list_dictionary(keys, values):
    out = {}
    for idx, val in enumerate(keys):
        out[val] = values[idx] if idx < len(values) else None
    return out
    
def sum_range(nums, start=0, end=None):
    if end is None:
        end = len(nums)
    return sum(nums[start:end + 1])

def freq_counter(coll):
    counts = {}
    for x in coll:
        counts[x] = counts.get(x, 0) + 1
    return counts


def same_frequency(num1, num2):
    return freq_counter(str(num1)) == freq_counter(str(num2))

def two_oldest_ages(ages):
    uniq_ages = set(ages)
    oldest = sorted(uniq_ages)[-2:]
    return tuple(oldest)
    
def find_the_duplicate(nums):
    seen = set()
    for num in nums:
        if num in seen:
            return num
        seen.add(num)
        
def sum_up_diagonals(matrix):
    total = 0
    for i in range(len(matrix)):
        total += matrix[i][i]
        total += matrix[i][-1 - i]
    return total
    
def min_max_keys(d):
    keys = d.keys()
    return (min(keys), max(keys))
    
def find_greater_numbers(nums):
    count = 0
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[j] > nums[i]:
                count += 1
    return count
