def product(a, b):
    return (a * b)
    
def weekday_name(day_of_week):
    if (day_of_week == 1):
        return "Sunday"
    elif (day_of_week == 2):
        return "Monday"
    elif (day_of_week == 3):
        return "Tuesday"
    elif (day_of_week == 4):
        return "Wednesday"
    elif (day_of_week == 5):
        return "Thursday"
    elif (day_of_week == 6):
        return "Friday"
    elif (day_of_week == 7):
        return "Saturday"
    else: return None
    
def last_element(lst):
    if not lst:
        return None
    else:
        return lst[-1]
        
def number_compare(a, b):
    if (a == b):
        return 'Numbers are equal'
    elif (a < b):
        return 'Second is greater'
    elif (a > b):
        return 'First is greater'
        
def reverse_string(phrase):
    return phrase[::-1]
    
def single_letter_count(word, letter):
    finalWord = word.upper()
    finalLetter = letter.upper()
    return finalWord.count(finalLetter)
    
def multiple_letter_count(phrase):
    counter = {}
    for ltr in phrase:
        counter[ltr] = counter.get(ltr, 0) + 1
    return counter
    
def list_manipulation(lst, command, location, value=None):
    if command == 'remove' and location == 'beginning':
        return lst[0]
    elif command == 'add' and location == 'beginning':
        lst.insert(0, value)
        return lst
    elif command == 'remove' and location == 'end':
        return lst[-1]
    elif command == 'add' and location == 'end':
        lst.append(value)
        return lst
    else:
        return None
        
def is_palindrome(phrase):
    upperP = phrase.upper()
    checkP = upperP.replace(' ', '')
    for i in range(0, int(len(checkP)/2)):
        if checkP[i] != checkP[len(checkP)-i-1]:
            return False
    return True
    
def frequency(lst, search_term):
    return lst.count(search_term)
    
def flip_case(phrase, to_swap):
    to_swap = to_swap.lower()
    out = ""def multiply_even_numbers(nums):
    evens = []
    result = 1
    for num in nums:
        if num % 2 == 0:
            evens.append(num)
    for even in evens:
        result = result * even
    return result
    
def capitalize(phrase):
    return phrase.capitalize()
    
def compact(lst):
    return [val for val in lst if val]
    
def intersection(l1, l2):
    shared = list(set(l1).intersection(l2))
    return shared
    
def partition(lst, fn):
    true_list = []
    false_list = []
    for val in lst:
        if fn(val):
            true_list.append(val)
        else:
            false_list.append(val)

    return [true_list, false_list]
    for ltr in phrase:
        if ltr.lower() == to_swap:
            ltr = ltr.swapcase()
        out += ltr
    return out
    
def multiply_even_numbers(nums):
    evens = []
    result = 1
    for num in nums:
        if num % 2 == 0:
            evens.append(num)
    for even in evens:
        result = result * even
    return result
    
def partition(lst, fn):
    true_list = []
    false_list = []
    for val in lst:
        if fn(val):
            true_list.append(val)
        else:
            false_list.append(val)
    return [true_list, false_list]
